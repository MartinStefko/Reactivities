using System;
using System.Net;
using System.Threading;
using System.Threading.Tasks;
using Application.Errors;
using AutoMapper;
using Domain;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Persistence;

namespace Application.Activities
{
    public class Details
    {
        public class Query : IRequest<ActivityDto>
        {
            public Guid Id { get; set; }
        }

        public class Handler : IRequestHandler<Query, ActivityDto>
        // ctrl + . generate constructor -> autogenerated code bellow
        // ctrl + . on IRequestHandler and generate interface -> autogenerated code bello
        {
            private readonly IMapper _mapper;
            private readonly DataContext _context;
            // function handler will consume value of context of type DataContext
            public Handler(DataContext context, IMapper mapper)
            // ctrl + . -> using Persistence
            // ctrl + .  on context-> initialize field from parameter 
            {
                this._mapper = mapper;
                this._context = context;
            }

            public async Task<ActivityDto> Handle(Query request, CancellationToken cancellationToken)
            {
                var activity = await _context.Activities
                    .FindAsync(request.Id);

                if (activity == null)
                    throw new RestException(HttpStatusCode.NotFound, new { activity = "Not found" });

                var activityToReturn = _mapper.Map<Activity, ActivityDto>(activity);

                return activityToReturn;
            }
        }
    }
}